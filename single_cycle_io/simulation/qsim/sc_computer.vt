// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/01/2020 11:04:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sc_computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sc_computer_vlg_sample_tst(
	SW0,
	SW1,
	SW2,
	SW3,
	SW4,
	SW5,
	SW6,
	SW7,
	SW8,
	SW9,
	clk,
	reset,
	sampler_tx
);
input  SW0;
input  SW1;
input  SW2;
input  SW3;
input  SW4;
input  SW5;
input  SW6;
input  SW7;
input  SW8;
input  SW9;
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(SW0 or SW1 or SW2 or SW3 or SW4 or SW5 or SW6 or SW7 or SW8 or SW9 or clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sc_computer_vlg_check_tst (
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	WangHangyu,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [31:0] WangHangyu;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [31:0] WangHangyu_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [31:0] WangHangyu_prev;

reg [31:0] WangHangyu_expected_prev;

reg [31:0] last_WangHangyu_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	WangHangyu_prev = WangHangyu;
end

// update expected /o prevs

always @(trigger)
begin
	WangHangyu_expected_prev = WangHangyu_expected;
end


// expected WangHangyu[ 31 ]
initial
begin
	WangHangyu_expected[31] = 1'bX;
end 
// expected WangHangyu[ 30 ]
initial
begin
	WangHangyu_expected[30] = 1'bX;
end 
// expected WangHangyu[ 29 ]
initial
begin
	WangHangyu_expected[29] = 1'bX;
end 
// expected WangHangyu[ 28 ]
initial
begin
	WangHangyu_expected[28] = 1'bX;
end 
// expected WangHangyu[ 27 ]
initial
begin
	WangHangyu_expected[27] = 1'bX;
end 
// expected WangHangyu[ 26 ]
initial
begin
	WangHangyu_expected[26] = 1'bX;
end 
// expected WangHangyu[ 25 ]
initial
begin
	WangHangyu_expected[25] = 1'bX;
end 
// expected WangHangyu[ 24 ]
initial
begin
	WangHangyu_expected[24] = 1'bX;
end 
// expected WangHangyu[ 23 ]
initial
begin
	WangHangyu_expected[23] = 1'bX;
end 
// expected WangHangyu[ 22 ]
initial
begin
	WangHangyu_expected[22] = 1'bX;
end 
// expected WangHangyu[ 21 ]
initial
begin
	WangHangyu_expected[21] = 1'bX;
end 
// expected WangHangyu[ 20 ]
initial
begin
	WangHangyu_expected[20] = 1'bX;
end 
// expected WangHangyu[ 19 ]
initial
begin
	WangHangyu_expected[19] = 1'bX;
end 
// expected WangHangyu[ 18 ]
initial
begin
	WangHangyu_expected[18] = 1'bX;
end 
// expected WangHangyu[ 17 ]
initial
begin
	WangHangyu_expected[17] = 1'bX;
end 
// expected WangHangyu[ 16 ]
initial
begin
	WangHangyu_expected[16] = 1'bX;
end 
// expected WangHangyu[ 15 ]
initial
begin
	WangHangyu_expected[15] = 1'bX;
end 
// expected WangHangyu[ 14 ]
initial
begin
	WangHangyu_expected[14] = 1'bX;
end 
// expected WangHangyu[ 13 ]
initial
begin
	WangHangyu_expected[13] = 1'bX;
end 
// expected WangHangyu[ 12 ]
initial
begin
	WangHangyu_expected[12] = 1'bX;
end 
// expected WangHangyu[ 11 ]
initial
begin
	WangHangyu_expected[11] = 1'bX;
end 
// expected WangHangyu[ 10 ]
initial
begin
	WangHangyu_expected[10] = 1'bX;
end 
// expected WangHangyu[ 9 ]
initial
begin
	WangHangyu_expected[9] = 1'bX;
end 
// expected WangHangyu[ 8 ]
initial
begin
	WangHangyu_expected[8] = 1'bX;
end 
// expected WangHangyu[ 7 ]
initial
begin
	WangHangyu_expected[7] = 1'bX;
end 
// expected WangHangyu[ 6 ]
initial
begin
	WangHangyu_expected[6] = 1'bX;
end 
// expected WangHangyu[ 5 ]
initial
begin
	WangHangyu_expected[5] = 1'bX;
end 
// expected WangHangyu[ 4 ]
initial
begin
	WangHangyu_expected[4] = 1'bX;
end 
// expected WangHangyu[ 3 ]
initial
begin
	WangHangyu_expected[3] = 1'bX;
end 
// expected WangHangyu[ 2 ]
initial
begin
	WangHangyu_expected[2] = 1'bX;
end 
// expected WangHangyu[ 1 ]
initial
begin
	WangHangyu_expected[1] = 1'bX;
end 
// expected WangHangyu[ 0 ]
initial
begin
	WangHangyu_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or WangHangyu_expected or WangHangyu)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected WangHangyu = %b | ",HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,WangHangyu_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real WangHangyu = %b | ",HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,WangHangyu_prev);
`endif
	if (
		( WangHangyu_expected_prev[0] !== 1'bx ) && ( WangHangyu_prev[0] !== WangHangyu_expected_prev[0] )
		&& ((WangHangyu_expected_prev[0] !== last_WangHangyu_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[0] = WangHangyu_expected_prev[0];
	end
	if (
		( WangHangyu_expected_prev[1] !== 1'bx ) && ( WangHangyu_prev[1] !== WangHangyu_expected_prev[1] )
		&& ((WangHangyu_expected_prev[1] !== last_WangHangyu_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[1] = WangHangyu_expected_prev[1];
	end
	if (
		( WangHangyu_expected_prev[2] !== 1'bx ) && ( WangHangyu_prev[2] !== WangHangyu_expected_prev[2] )
		&& ((WangHangyu_expected_prev[2] !== last_WangHangyu_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[2] = WangHangyu_expected_prev[2];
	end
	if (
		( WangHangyu_expected_prev[3] !== 1'bx ) && ( WangHangyu_prev[3] !== WangHangyu_expected_prev[3] )
		&& ((WangHangyu_expected_prev[3] !== last_WangHangyu_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[3] = WangHangyu_expected_prev[3];
	end
	if (
		( WangHangyu_expected_prev[4] !== 1'bx ) && ( WangHangyu_prev[4] !== WangHangyu_expected_prev[4] )
		&& ((WangHangyu_expected_prev[4] !== last_WangHangyu_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[4] = WangHangyu_expected_prev[4];
	end
	if (
		( WangHangyu_expected_prev[5] !== 1'bx ) && ( WangHangyu_prev[5] !== WangHangyu_expected_prev[5] )
		&& ((WangHangyu_expected_prev[5] !== last_WangHangyu_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[5] = WangHangyu_expected_prev[5];
	end
	if (
		( WangHangyu_expected_prev[6] !== 1'bx ) && ( WangHangyu_prev[6] !== WangHangyu_expected_prev[6] )
		&& ((WangHangyu_expected_prev[6] !== last_WangHangyu_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[6] = WangHangyu_expected_prev[6];
	end
	if (
		( WangHangyu_expected_prev[7] !== 1'bx ) && ( WangHangyu_prev[7] !== WangHangyu_expected_prev[7] )
		&& ((WangHangyu_expected_prev[7] !== last_WangHangyu_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[7] = WangHangyu_expected_prev[7];
	end
	if (
		( WangHangyu_expected_prev[8] !== 1'bx ) && ( WangHangyu_prev[8] !== WangHangyu_expected_prev[8] )
		&& ((WangHangyu_expected_prev[8] !== last_WangHangyu_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[8] = WangHangyu_expected_prev[8];
	end
	if (
		( WangHangyu_expected_prev[9] !== 1'bx ) && ( WangHangyu_prev[9] !== WangHangyu_expected_prev[9] )
		&& ((WangHangyu_expected_prev[9] !== last_WangHangyu_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[9] = WangHangyu_expected_prev[9];
	end
	if (
		( WangHangyu_expected_prev[10] !== 1'bx ) && ( WangHangyu_prev[10] !== WangHangyu_expected_prev[10] )
		&& ((WangHangyu_expected_prev[10] !== last_WangHangyu_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[10] = WangHangyu_expected_prev[10];
	end
	if (
		( WangHangyu_expected_prev[11] !== 1'bx ) && ( WangHangyu_prev[11] !== WangHangyu_expected_prev[11] )
		&& ((WangHangyu_expected_prev[11] !== last_WangHangyu_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[11] = WangHangyu_expected_prev[11];
	end
	if (
		( WangHangyu_expected_prev[12] !== 1'bx ) && ( WangHangyu_prev[12] !== WangHangyu_expected_prev[12] )
		&& ((WangHangyu_expected_prev[12] !== last_WangHangyu_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[12] = WangHangyu_expected_prev[12];
	end
	if (
		( WangHangyu_expected_prev[13] !== 1'bx ) && ( WangHangyu_prev[13] !== WangHangyu_expected_prev[13] )
		&& ((WangHangyu_expected_prev[13] !== last_WangHangyu_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[13] = WangHangyu_expected_prev[13];
	end
	if (
		( WangHangyu_expected_prev[14] !== 1'bx ) && ( WangHangyu_prev[14] !== WangHangyu_expected_prev[14] )
		&& ((WangHangyu_expected_prev[14] !== last_WangHangyu_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[14] = WangHangyu_expected_prev[14];
	end
	if (
		( WangHangyu_expected_prev[15] !== 1'bx ) && ( WangHangyu_prev[15] !== WangHangyu_expected_prev[15] )
		&& ((WangHangyu_expected_prev[15] !== last_WangHangyu_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[15] = WangHangyu_expected_prev[15];
	end
	if (
		( WangHangyu_expected_prev[16] !== 1'bx ) && ( WangHangyu_prev[16] !== WangHangyu_expected_prev[16] )
		&& ((WangHangyu_expected_prev[16] !== last_WangHangyu_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[16] = WangHangyu_expected_prev[16];
	end
	if (
		( WangHangyu_expected_prev[17] !== 1'bx ) && ( WangHangyu_prev[17] !== WangHangyu_expected_prev[17] )
		&& ((WangHangyu_expected_prev[17] !== last_WangHangyu_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[17] = WangHangyu_expected_prev[17];
	end
	if (
		( WangHangyu_expected_prev[18] !== 1'bx ) && ( WangHangyu_prev[18] !== WangHangyu_expected_prev[18] )
		&& ((WangHangyu_expected_prev[18] !== last_WangHangyu_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[18] = WangHangyu_expected_prev[18];
	end
	if (
		( WangHangyu_expected_prev[19] !== 1'bx ) && ( WangHangyu_prev[19] !== WangHangyu_expected_prev[19] )
		&& ((WangHangyu_expected_prev[19] !== last_WangHangyu_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[19] = WangHangyu_expected_prev[19];
	end
	if (
		( WangHangyu_expected_prev[20] !== 1'bx ) && ( WangHangyu_prev[20] !== WangHangyu_expected_prev[20] )
		&& ((WangHangyu_expected_prev[20] !== last_WangHangyu_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[20] = WangHangyu_expected_prev[20];
	end
	if (
		( WangHangyu_expected_prev[21] !== 1'bx ) && ( WangHangyu_prev[21] !== WangHangyu_expected_prev[21] )
		&& ((WangHangyu_expected_prev[21] !== last_WangHangyu_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[21] = WangHangyu_expected_prev[21];
	end
	if (
		( WangHangyu_expected_prev[22] !== 1'bx ) && ( WangHangyu_prev[22] !== WangHangyu_expected_prev[22] )
		&& ((WangHangyu_expected_prev[22] !== last_WangHangyu_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[22] = WangHangyu_expected_prev[22];
	end
	if (
		( WangHangyu_expected_prev[23] !== 1'bx ) && ( WangHangyu_prev[23] !== WangHangyu_expected_prev[23] )
		&& ((WangHangyu_expected_prev[23] !== last_WangHangyu_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[23] = WangHangyu_expected_prev[23];
	end
	if (
		( WangHangyu_expected_prev[24] !== 1'bx ) && ( WangHangyu_prev[24] !== WangHangyu_expected_prev[24] )
		&& ((WangHangyu_expected_prev[24] !== last_WangHangyu_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[24] = WangHangyu_expected_prev[24];
	end
	if (
		( WangHangyu_expected_prev[25] !== 1'bx ) && ( WangHangyu_prev[25] !== WangHangyu_expected_prev[25] )
		&& ((WangHangyu_expected_prev[25] !== last_WangHangyu_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[25] = WangHangyu_expected_prev[25];
	end
	if (
		( WangHangyu_expected_prev[26] !== 1'bx ) && ( WangHangyu_prev[26] !== WangHangyu_expected_prev[26] )
		&& ((WangHangyu_expected_prev[26] !== last_WangHangyu_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[26] = WangHangyu_expected_prev[26];
	end
	if (
		( WangHangyu_expected_prev[27] !== 1'bx ) && ( WangHangyu_prev[27] !== WangHangyu_expected_prev[27] )
		&& ((WangHangyu_expected_prev[27] !== last_WangHangyu_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[27] = WangHangyu_expected_prev[27];
	end
	if (
		( WangHangyu_expected_prev[28] !== 1'bx ) && ( WangHangyu_prev[28] !== WangHangyu_expected_prev[28] )
		&& ((WangHangyu_expected_prev[28] !== last_WangHangyu_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[28] = WangHangyu_expected_prev[28];
	end
	if (
		( WangHangyu_expected_prev[29] !== 1'bx ) && ( WangHangyu_prev[29] !== WangHangyu_expected_prev[29] )
		&& ((WangHangyu_expected_prev[29] !== last_WangHangyu_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[29] = WangHangyu_expected_prev[29];
	end
	if (
		( WangHangyu_expected_prev[30] !== 1'bx ) && ( WangHangyu_prev[30] !== WangHangyu_expected_prev[30] )
		&& ((WangHangyu_expected_prev[30] !== last_WangHangyu_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[30] = WangHangyu_expected_prev[30];
	end
	if (
		( WangHangyu_expected_prev[31] !== 1'bx ) && ( WangHangyu_prev[31] !== WangHangyu_expected_prev[31] )
		&& ((WangHangyu_expected_prev[31] !== last_WangHangyu_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WangHangyu_exp[31] = WangHangyu_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sc_computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg SW0;
reg SW1;
reg SW2;
reg SW3;
reg SW4;
reg SW5;
reg SW6;
reg SW7;
reg SW8;
reg SW9;
reg clk;
reg reset;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [31:0] WangHangyu;

wire sampler;                             

// assign statements (if any)                          
sc_computer i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2),
	.SW3(SW3),
	.SW4(SW4),
	.SW5(SW5),
	.SW6(SW6),
	.SW7(SW7),
	.SW8(SW8),
	.SW9(SW9),
	.WangHangyu(WangHangyu),
	.clk(clk),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #30000 1'b1;
end 

sc_computer_vlg_sample_tst tb_sample (
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2),
	.SW3(SW3),
	.SW4(SW4),
	.SW5(SW5),
	.SW6(SW6),
	.SW7(SW7),
	.SW8(SW8),
	.SW9(SW9),
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

sc_computer_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.WangHangyu(WangHangyu),
	.sampler_rx(sampler)
);
endmodule

