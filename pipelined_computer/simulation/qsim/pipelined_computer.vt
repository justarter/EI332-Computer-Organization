// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/01/2020 11:42:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pipelined_computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pipelined_computer_vlg_sample_tst(
	clock,
	in_port0,
	in_port1,
	resetn,
	sampler_tx
);
input  clock;
input [5:0] in_port0;
input [5:0] in_port1;
input  resetn;
output sampler_tx;

reg sample;
time current_time;
always @(clock or in_port0 or in_port1 or resetn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pipelined_computer_vlg_check_tst (
	WangHangyu,
	mem_clock,
	oealu,
	oins,
	oinst,
	omalu,
	onpc,
	opc,
	out_port0,
	out_port1,
	out_port2,
	out_port3,
	owalu,
	sampler_rx
);
input [31:0] WangHangyu;
input  mem_clock;
input [31:0] oealu;
input [31:0] oins;
input [31:0] oinst;
input [31:0] omalu;
input [31:0] onpc;
input [31:0] opc;
input [31:0] out_port0;
input [31:0] out_port1;
input [31:0] out_port2;
input [31:0] out_port3;
input [31:0] owalu;
input sampler_rx;

reg [31:0] WangHangyu_expected;
reg  mem_clock_expected;
reg [31:0] oealu_expected;
reg [31:0] oins_expected;
reg [31:0] oinst_expected;
reg [31:0] omalu_expected;
reg [31:0] onpc_expected;
reg [31:0] opc_expected;
reg [31:0] out_port0_expected;
reg [31:0] out_port1_expected;
reg [31:0] out_port2_expected;
reg [31:0] out_port3_expected;
reg [31:0] owalu_expected;

reg [31:0] WangHangyu_prev;
reg  mem_clock_prev;
reg [31:0] oealu_prev;
reg [31:0] oins_prev;
reg [31:0] oinst_prev;
reg [31:0] omalu_prev;
reg [31:0] onpc_prev;
reg [31:0] opc_prev;
reg [31:0] out_port0_prev;
reg [31:0] out_port1_prev;
reg [31:0] out_port2_prev;
reg [31:0] out_port3_prev;
reg [31:0] owalu_prev;

reg [31:0] WangHangyu_expected_prev;
reg  mem_clock_expected_prev;
reg [31:0] oins_expected_prev;
reg [31:0] oinst_expected_prev;
reg [31:0] opc_expected_prev;

reg [31:0] last_WangHangyu_exp;
reg  last_mem_clock_exp;
reg [31:0] last_oins_exp;
reg [31:0] last_oinst_exp;
reg [31:0] last_opc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	WangHangyu_prev = WangHangyu;
	mem_clock_prev = mem_clock;
	oealu_prev = oealu;
	oins_prev = oins;
	oinst_prev = oinst;
	omalu_prev = omalu;
	onpc_prev = onpc;
	opc_prev = opc;
	out_port0_prev = out_port0;
	out_port1_prev = out_port1;
	out_port2_prev = out_port2;
	out_port3_prev = out_port3;
	owalu_prev = owalu;
end

// update expected /o prevs

always @(trigger)
begin
	WangHangyu_expected_prev = WangHangyu_expected;
	mem_clock_expected_prev = mem_clock_expected;
	oins_expected_prev = oins_expected;
	oinst_expected_prev = oinst_expected;
	opc_expected_prev = opc_expected;
end



// expected mem_clock
initial
begin
	mem_clock_expected = 1'bX;
end 
// expected opc[ 31 ]
initial
begin
	opc_expected[31] = 1'bX;
end 
// expected opc[ 30 ]
initial
begin
	opc_expected[30] = 1'bX;
end 
// expected opc[ 29 ]
initial
begin
	opc_expected[29] = 1'bX;
end 
// expected opc[ 28 ]
initial
begin
	opc_expected[28] = 1'bX;
end 
// expected opc[ 27 ]
initial
begin
	opc_expected[27] = 1'bX;
end 
// expected opc[ 26 ]
initial
begin
	opc_expected[26] = 1'bX;
end 
// expected opc[ 25 ]
initial
begin
	opc_expected[25] = 1'bX;
end 
// expected opc[ 24 ]
initial
begin
	opc_expected[24] = 1'bX;
end 
// expected opc[ 23 ]
initial
begin
	opc_expected[23] = 1'bX;
end 
// expected opc[ 22 ]
initial
begin
	opc_expected[22] = 1'bX;
end 
// expected opc[ 21 ]
initial
begin
	opc_expected[21] = 1'bX;
end 
// expected opc[ 20 ]
initial
begin
	opc_expected[20] = 1'bX;
end 
// expected opc[ 19 ]
initial
begin
	opc_expected[19] = 1'bX;
end 
// expected opc[ 18 ]
initial
begin
	opc_expected[18] = 1'bX;
end 
// expected opc[ 17 ]
initial
begin
	opc_expected[17] = 1'bX;
end 
// expected opc[ 16 ]
initial
begin
	opc_expected[16] = 1'bX;
end 
// expected opc[ 15 ]
initial
begin
	opc_expected[15] = 1'bX;
end 
// expected opc[ 14 ]
initial
begin
	opc_expected[14] = 1'bX;
end 
// expected opc[ 13 ]
initial
begin
	opc_expected[13] = 1'bX;
end 
// expected opc[ 12 ]
initial
begin
	opc_expected[12] = 1'bX;
end 
// expected opc[ 11 ]
initial
begin
	opc_expected[11] = 1'bX;
end 
// expected opc[ 10 ]
initial
begin
	opc_expected[10] = 1'bX;
end 
// expected opc[ 9 ]
initial
begin
	opc_expected[9] = 1'bX;
end 
// expected opc[ 8 ]
initial
begin
	opc_expected[8] = 1'bX;
end 
// expected opc[ 7 ]
initial
begin
	opc_expected[7] = 1'bX;
end 
// expected opc[ 6 ]
initial
begin
	opc_expected[6] = 1'bX;
end 
// expected opc[ 5 ]
initial
begin
	opc_expected[5] = 1'bX;
end 
// expected opc[ 4 ]
initial
begin
	opc_expected[4] = 1'bX;
end 
// expected opc[ 3 ]
initial
begin
	opc_expected[3] = 1'bX;
end 
// expected opc[ 2 ]
initial
begin
	opc_expected[2] = 1'bX;
end 
// expected opc[ 1 ]
initial
begin
	opc_expected[1] = 1'bX;
end 
// expected opc[ 0 ]
initial
begin
	opc_expected[0] = 1'bX;
end 
// expected oinst[ 31 ]
initial
begin
	oinst_expected[31] = 1'bX;
end 
// expected oinst[ 30 ]
initial
begin
	oinst_expected[30] = 1'bX;
end 
// expected oinst[ 29 ]
initial
begin
	oinst_expected[29] = 1'bX;
end 
// expected oinst[ 28 ]
initial
begin
	oinst_expected[28] = 1'bX;
end 
// expected oinst[ 27 ]
initial
begin
	oinst_expected[27] = 1'bX;
end 
// expected oinst[ 26 ]
initial
begin
	oinst_expected[26] = 1'bX;
end 
// expected oinst[ 25 ]
initial
begin
	oinst_expected[25] = 1'bX;
end 
// expected oinst[ 24 ]
initial
begin
	oinst_expected[24] = 1'bX;
end 
// expected oinst[ 23 ]
initial
begin
	oinst_expected[23] = 1'bX;
end 
// expected oinst[ 22 ]
initial
begin
	oinst_expected[22] = 1'bX;
end 
// expected oinst[ 21 ]
initial
begin
	oinst_expected[21] = 1'bX;
end 
// expected oinst[ 20 ]
initial
begin
	oinst_expected[20] = 1'bX;
end 
// expected oinst[ 19 ]
initial
begin
	oinst_expected[19] = 1'bX;
end 
// expected oinst[ 18 ]
initial
begin
	oinst_expected[18] = 1'bX;
end 
// expected oinst[ 17 ]
initial
begin
	oinst_expected[17] = 1'bX;
end 
// expected oinst[ 16 ]
initial
begin
	oinst_expected[16] = 1'bX;
end 
// expected oinst[ 15 ]
initial
begin
	oinst_expected[15] = 1'bX;
end 
// expected oinst[ 14 ]
initial
begin
	oinst_expected[14] = 1'bX;
end 
// expected oinst[ 13 ]
initial
begin
	oinst_expected[13] = 1'bX;
end 
// expected oinst[ 12 ]
initial
begin
	oinst_expected[12] = 1'bX;
end 
// expected oinst[ 11 ]
initial
begin
	oinst_expected[11] = 1'bX;
end 
// expected oinst[ 10 ]
initial
begin
	oinst_expected[10] = 1'bX;
end 
// expected oinst[ 9 ]
initial
begin
	oinst_expected[9] = 1'bX;
end 
// expected oinst[ 8 ]
initial
begin
	oinst_expected[8] = 1'bX;
end 
// expected oinst[ 7 ]
initial
begin
	oinst_expected[7] = 1'bX;
end 
// expected oinst[ 6 ]
initial
begin
	oinst_expected[6] = 1'bX;
end 
// expected oinst[ 5 ]
initial
begin
	oinst_expected[5] = 1'bX;
end 
// expected oinst[ 4 ]
initial
begin
	oinst_expected[4] = 1'bX;
end 
// expected oinst[ 3 ]
initial
begin
	oinst_expected[3] = 1'bX;
end 
// expected oinst[ 2 ]
initial
begin
	oinst_expected[2] = 1'bX;
end 
// expected oinst[ 1 ]
initial
begin
	oinst_expected[1] = 1'bX;
end 
// expected oinst[ 0 ]
initial
begin
	oinst_expected[0] = 1'bX;
end 
// expected oins[ 31 ]
initial
begin
	oins_expected[31] = 1'bX;
end 
// expected oins[ 30 ]
initial
begin
	oins_expected[30] = 1'bX;
end 
// expected oins[ 29 ]
initial
begin
	oins_expected[29] = 1'bX;
end 
// expected oins[ 28 ]
initial
begin
	oins_expected[28] = 1'bX;
end 
// expected oins[ 27 ]
initial
begin
	oins_expected[27] = 1'bX;
end 
// expected oins[ 26 ]
initial
begin
	oins_expected[26] = 1'bX;
end 
// expected oins[ 25 ]
initial
begin
	oins_expected[25] = 1'bX;
end 
// expected oins[ 24 ]
initial
begin
	oins_expected[24] = 1'bX;
end 
// expected oins[ 23 ]
initial
begin
	oins_expected[23] = 1'bX;
end 
// expected oins[ 22 ]
initial
begin
	oins_expected[22] = 1'bX;
end 
// expected oins[ 21 ]
initial
begin
	oins_expected[21] = 1'bX;
end 
// expected oins[ 20 ]
initial
begin
	oins_expected[20] = 1'bX;
end 
// expected oins[ 19 ]
initial
begin
	oins_expected[19] = 1'bX;
end 
// expected oins[ 18 ]
initial
begin
	oins_expected[18] = 1'bX;
end 
// expected oins[ 17 ]
initial
begin
	oins_expected[17] = 1'bX;
end 
// expected oins[ 16 ]
initial
begin
	oins_expected[16] = 1'bX;
end 
// expected oins[ 15 ]
initial
begin
	oins_expected[15] = 1'bX;
end 
// expected oins[ 14 ]
initial
begin
	oins_expected[14] = 1'bX;
end 
// expected oins[ 13 ]
initial
begin
	oins_expected[13] = 1'bX;
end 
// expected oins[ 12 ]
initial
begin
	oins_expected[12] = 1'bX;
end 
// expected oins[ 11 ]
initial
begin
	oins_expected[11] = 1'bX;
end 
// expected oins[ 10 ]
initial
begin
	oins_expected[10] = 1'bX;
end 
// expected oins[ 9 ]
initial
begin
	oins_expected[9] = 1'bX;
end 
// expected oins[ 8 ]
initial
begin
	oins_expected[8] = 1'bX;
end 
// expected oins[ 7 ]
initial
begin
	oins_expected[7] = 1'bX;
end 
// expected oins[ 6 ]
initial
begin
	oins_expected[6] = 1'bX;
end 
// expected oins[ 5 ]
initial
begin
	oins_expected[5] = 1'bX;
end 
// expected oins[ 4 ]
initial
begin
	oins_expected[4] = 1'bX;
end 
// expected oins[ 3 ]
initial
begin
	oins_expected[3] = 1'bX;
end 
// expected oins[ 2 ]
initial
begin
	oins_expected[2] = 1'bX;
end 
// expected oins[ 1 ]
initial
begin
	oins_expected[1] = 1'bX;
end 
// expected oins[ 0 ]
initial
begin
	oins_expected[0] = 1'bX;
end 
// expected WangHangyu[ 31 ]
initial
begin
	WangHangyu_expected[31] = 1'bX;
end 
// expected WangHangyu[ 30 ]
initial
begin
	WangHangyu_expected[30] = 1'bX;
end 
// expected WangHangyu[ 29 ]
initial
begin
	WangHangyu_expected[29] = 1'bX;
end 
// expected WangHangyu[ 28 ]
initial
begin
	WangHangyu_expected[28] = 1'bX;
end 
// expected WangHangyu[ 27 ]
initial
begin
	WangHangyu_expected[27] = 1'bX;
end 
// expected WangHangyu[ 26 ]
initial
begin
	WangHangyu_expected[26] = 1'bX;
end 
// expected WangHangyu[ 25 ]
initial
begin
	WangHangyu_expected[25] = 1'bX;
end 
// expected WangHangyu[ 24 ]
initial
begin
	WangHangyu_expected[24] = 1'bX;
end 
// expected WangHangyu[ 23 ]
initial
begin
	WangHangyu_expected[23] = 1'bX;
end 
// expected WangHangyu[ 22 ]
initial
begin
	WangHangyu_expected[22] = 1'bX;
end 
// expected WangHangyu[ 21 ]
initial
begin
	WangHangyu_expected[21] = 1'bX;
end 
// expected WangHangyu[ 20 ]
initial
begin
	WangHangyu_expected[20] = 1'bX;
end 
// expected WangHangyu[ 19 ]
initial
begin
	WangHangyu_expected[19] = 1'bX;
end 
// expected WangHangyu[ 18 ]
initial
begin
	WangHangyu_expected[18] = 1'bX;
end 
// expected WangHangyu[ 17 ]
initial
begin
	WangHangyu_expected[17] = 1'bX;
end 
// expected WangHangyu[ 16 ]
initial
begin
	WangHangyu_expected[16] = 1'bX;
end 
// expected WangHangyu[ 15 ]
initial
begin
	WangHangyu_expected[15] = 1'bX;
end 
// expected WangHangyu[ 14 ]
initial
begin
	WangHangyu_expected[14] = 1'bX;
end 
// expected WangHangyu[ 13 ]
initial
begin
	WangHangyu_expected[13] = 1'bX;
end 
// expected WangHangyu[ 12 ]
initial
begin
	WangHangyu_expected[12] = 1'bX;
end 
// expected WangHangyu[ 11 ]
initial
begin
	WangHangyu_expected[11] = 1'bX;
end 
// expected WangHangyu[ 10 ]
initial
begin
	WangHangyu_expected[10] = 1'bX;
end 
// expected WangHangyu[ 9 ]
initial
begin
	WangHangyu_expected[9] = 1'bX;
end 
// expected WangHangyu[ 8 ]
initial
begin
	WangHangyu_expected[8] = 1'bX;
end 
// expected WangHangyu[ 7 ]
initial
begin
	WangHangyu_expected[7] = 1'bX;
end 
// expected WangHangyu[ 6 ]
initial
begin
	WangHangyu_expected[6] = 1'bX;
end 
// expected WangHangyu[ 5 ]
initial
begin
	WangHangyu_expected[5] = 1'bX;
end 
// expected WangHangyu[ 4 ]
initial
begin
	WangHangyu_expected[4] = 1'bX;
end 
// expected WangHangyu[ 3 ]
initial
begin
	WangHangyu_expected[3] = 1'bX;
end 
// expected WangHangyu[ 2 ]
initial
begin
	WangHangyu_expected[2] = 1'bX;
end 
// expected WangHangyu[ 1 ]
initial
begin
	WangHangyu_expected[1] = 1'bX;
end 
// expected WangHangyu[ 0 ]
initial
begin
	WangHangyu_expected[0] = 1'bX;
end 
// generate trigger
always @(WangHangyu_expected or WangHangyu or mem_clock_expected or mem_clock or oealu_expected or oealu or oins_expected or oins or oinst_expected or oinst or omalu_expected or omalu or onpc_expected or onpc or opc_expected or opc or out_port0_expected or out_port0 or out_port1_expected or out_port1 or out_port2_expected or out_port2 or out_port3_expected or out_port3 or owalu_expected or owalu)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected WangHangyu = %b | expected mem_clock = %b | expected oealu = %b | expected oins = %b | expected oinst = %b | expected omalu = %b | expected onpc = %b | expected opc = %b | expected out_port0 = %b | expected out_port1 = %b | expected out_port2 = %b | expected out_port3 = %b | expected owalu = %b | ",WangHangyu_expected_prev,mem_clock_expected_prev,oealu_expected_prev,oins_expected_prev,oinst_expected_prev,omalu_expected_prev,onpc_expected_prev,opc_expected_prev,out_port0_expected_prev,out_port1_expected_prev,out_port2_expected_prev,out_port3_expected_prev,owalu_expected_prev);
	$display("| real WangHangyu = %b | real mem_clock = %b | real oealu = %b | real oins = %b | real oinst = %b | real omalu = %b | real onpc = %b | real opc = %b | real out_port0 = %b | real out_port1 = %b | real out_port2 = %b | real out_port3 = %b | real owalu = %b | ",WangHangyu_prev,mem_clock_prev,oealu_prev,oins_prev,oinst_prev,omalu_prev,onpc_prev,opc_prev,out_port0_prev,out_port1_prev,out_port2_prev,out_port3_prev,owalu_prev);
`endif
	if (
		( WangHangyu_expected_prev[0] !== 1'bx ) && ( WangHangyu_prev[0] !== WangHangyu_expected_prev[0] )
		&& ((WangHangyu_expected_prev[0] !== last_WangHangyu_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[0] = WangHangyu_expected_prev[0];
	end
	if (
		( WangHangyu_expected_prev[1] !== 1'bx ) && ( WangHangyu_prev[1] !== WangHangyu_expected_prev[1] )
		&& ((WangHangyu_expected_prev[1] !== last_WangHangyu_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[1] = WangHangyu_expected_prev[1];
	end
	if (
		( WangHangyu_expected_prev[2] !== 1'bx ) && ( WangHangyu_prev[2] !== WangHangyu_expected_prev[2] )
		&& ((WangHangyu_expected_prev[2] !== last_WangHangyu_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[2] = WangHangyu_expected_prev[2];
	end
	if (
		( WangHangyu_expected_prev[3] !== 1'bx ) && ( WangHangyu_prev[3] !== WangHangyu_expected_prev[3] )
		&& ((WangHangyu_expected_prev[3] !== last_WangHangyu_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[3] = WangHangyu_expected_prev[3];
	end
	if (
		( WangHangyu_expected_prev[4] !== 1'bx ) && ( WangHangyu_prev[4] !== WangHangyu_expected_prev[4] )
		&& ((WangHangyu_expected_prev[4] !== last_WangHangyu_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[4] = WangHangyu_expected_prev[4];
	end
	if (
		( WangHangyu_expected_prev[5] !== 1'bx ) && ( WangHangyu_prev[5] !== WangHangyu_expected_prev[5] )
		&& ((WangHangyu_expected_prev[5] !== last_WangHangyu_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[5] = WangHangyu_expected_prev[5];
	end
	if (
		( WangHangyu_expected_prev[6] !== 1'bx ) && ( WangHangyu_prev[6] !== WangHangyu_expected_prev[6] )
		&& ((WangHangyu_expected_prev[6] !== last_WangHangyu_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[6] = WangHangyu_expected_prev[6];
	end
	if (
		( WangHangyu_expected_prev[7] !== 1'bx ) && ( WangHangyu_prev[7] !== WangHangyu_expected_prev[7] )
		&& ((WangHangyu_expected_prev[7] !== last_WangHangyu_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[7] = WangHangyu_expected_prev[7];
	end
	if (
		( WangHangyu_expected_prev[8] !== 1'bx ) && ( WangHangyu_prev[8] !== WangHangyu_expected_prev[8] )
		&& ((WangHangyu_expected_prev[8] !== last_WangHangyu_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[8] = WangHangyu_expected_prev[8];
	end
	if (
		( WangHangyu_expected_prev[9] !== 1'bx ) && ( WangHangyu_prev[9] !== WangHangyu_expected_prev[9] )
		&& ((WangHangyu_expected_prev[9] !== last_WangHangyu_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[9] = WangHangyu_expected_prev[9];
	end
	if (
		( WangHangyu_expected_prev[10] !== 1'bx ) && ( WangHangyu_prev[10] !== WangHangyu_expected_prev[10] )
		&& ((WangHangyu_expected_prev[10] !== last_WangHangyu_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[10] = WangHangyu_expected_prev[10];
	end
	if (
		( WangHangyu_expected_prev[11] !== 1'bx ) && ( WangHangyu_prev[11] !== WangHangyu_expected_prev[11] )
		&& ((WangHangyu_expected_prev[11] !== last_WangHangyu_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[11] = WangHangyu_expected_prev[11];
	end
	if (
		( WangHangyu_expected_prev[12] !== 1'bx ) && ( WangHangyu_prev[12] !== WangHangyu_expected_prev[12] )
		&& ((WangHangyu_expected_prev[12] !== last_WangHangyu_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[12] = WangHangyu_expected_prev[12];
	end
	if (
		( WangHangyu_expected_prev[13] !== 1'bx ) && ( WangHangyu_prev[13] !== WangHangyu_expected_prev[13] )
		&& ((WangHangyu_expected_prev[13] !== last_WangHangyu_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[13] = WangHangyu_expected_prev[13];
	end
	if (
		( WangHangyu_expected_prev[14] !== 1'bx ) && ( WangHangyu_prev[14] !== WangHangyu_expected_prev[14] )
		&& ((WangHangyu_expected_prev[14] !== last_WangHangyu_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[14] = WangHangyu_expected_prev[14];
	end
	if (
		( WangHangyu_expected_prev[15] !== 1'bx ) && ( WangHangyu_prev[15] !== WangHangyu_expected_prev[15] )
		&& ((WangHangyu_expected_prev[15] !== last_WangHangyu_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[15] = WangHangyu_expected_prev[15];
	end
	if (
		( WangHangyu_expected_prev[16] !== 1'bx ) && ( WangHangyu_prev[16] !== WangHangyu_expected_prev[16] )
		&& ((WangHangyu_expected_prev[16] !== last_WangHangyu_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[16] = WangHangyu_expected_prev[16];
	end
	if (
		( WangHangyu_expected_prev[17] !== 1'bx ) && ( WangHangyu_prev[17] !== WangHangyu_expected_prev[17] )
		&& ((WangHangyu_expected_prev[17] !== last_WangHangyu_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[17] = WangHangyu_expected_prev[17];
	end
	if (
		( WangHangyu_expected_prev[18] !== 1'bx ) && ( WangHangyu_prev[18] !== WangHangyu_expected_prev[18] )
		&& ((WangHangyu_expected_prev[18] !== last_WangHangyu_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[18] = WangHangyu_expected_prev[18];
	end
	if (
		( WangHangyu_expected_prev[19] !== 1'bx ) && ( WangHangyu_prev[19] !== WangHangyu_expected_prev[19] )
		&& ((WangHangyu_expected_prev[19] !== last_WangHangyu_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[19] = WangHangyu_expected_prev[19];
	end
	if (
		( WangHangyu_expected_prev[20] !== 1'bx ) && ( WangHangyu_prev[20] !== WangHangyu_expected_prev[20] )
		&& ((WangHangyu_expected_prev[20] !== last_WangHangyu_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[20] = WangHangyu_expected_prev[20];
	end
	if (
		( WangHangyu_expected_prev[21] !== 1'bx ) && ( WangHangyu_prev[21] !== WangHangyu_expected_prev[21] )
		&& ((WangHangyu_expected_prev[21] !== last_WangHangyu_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[21] = WangHangyu_expected_prev[21];
	end
	if (
		( WangHangyu_expected_prev[22] !== 1'bx ) && ( WangHangyu_prev[22] !== WangHangyu_expected_prev[22] )
		&& ((WangHangyu_expected_prev[22] !== last_WangHangyu_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[22] = WangHangyu_expected_prev[22];
	end
	if (
		( WangHangyu_expected_prev[23] !== 1'bx ) && ( WangHangyu_prev[23] !== WangHangyu_expected_prev[23] )
		&& ((WangHangyu_expected_prev[23] !== last_WangHangyu_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[23] = WangHangyu_expected_prev[23];
	end
	if (
		( WangHangyu_expected_prev[24] !== 1'bx ) && ( WangHangyu_prev[24] !== WangHangyu_expected_prev[24] )
		&& ((WangHangyu_expected_prev[24] !== last_WangHangyu_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[24] = WangHangyu_expected_prev[24];
	end
	if (
		( WangHangyu_expected_prev[25] !== 1'bx ) && ( WangHangyu_prev[25] !== WangHangyu_expected_prev[25] )
		&& ((WangHangyu_expected_prev[25] !== last_WangHangyu_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[25] = WangHangyu_expected_prev[25];
	end
	if (
		( WangHangyu_expected_prev[26] !== 1'bx ) && ( WangHangyu_prev[26] !== WangHangyu_expected_prev[26] )
		&& ((WangHangyu_expected_prev[26] !== last_WangHangyu_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[26] = WangHangyu_expected_prev[26];
	end
	if (
		( WangHangyu_expected_prev[27] !== 1'bx ) && ( WangHangyu_prev[27] !== WangHangyu_expected_prev[27] )
		&& ((WangHangyu_expected_prev[27] !== last_WangHangyu_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[27] = WangHangyu_expected_prev[27];
	end
	if (
		( WangHangyu_expected_prev[28] !== 1'bx ) && ( WangHangyu_prev[28] !== WangHangyu_expected_prev[28] )
		&& ((WangHangyu_expected_prev[28] !== last_WangHangyu_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[28] = WangHangyu_expected_prev[28];
	end
	if (
		( WangHangyu_expected_prev[29] !== 1'bx ) && ( WangHangyu_prev[29] !== WangHangyu_expected_prev[29] )
		&& ((WangHangyu_expected_prev[29] !== last_WangHangyu_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[29] = WangHangyu_expected_prev[29];
	end
	if (
		( WangHangyu_expected_prev[30] !== 1'bx ) && ( WangHangyu_prev[30] !== WangHangyu_expected_prev[30] )
		&& ((WangHangyu_expected_prev[30] !== last_WangHangyu_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[30] = WangHangyu_expected_prev[30];
	end
	if (
		( WangHangyu_expected_prev[31] !== 1'bx ) && ( WangHangyu_prev[31] !== WangHangyu_expected_prev[31] )
		&& ((WangHangyu_expected_prev[31] !== last_WangHangyu_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WangHangyu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WangHangyu_expected_prev);
		$display ("     Real value = %b", WangHangyu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WangHangyu_exp[31] = WangHangyu_expected_prev[31];
	end
	if (
		( mem_clock_expected_prev !== 1'bx ) && ( mem_clock_prev !== mem_clock_expected_prev )
		&& ((mem_clock_expected_prev !== last_mem_clock_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_clock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_clock_expected_prev);
		$display ("     Real value = %b", mem_clock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mem_clock_exp = mem_clock_expected_prev;
	end
	if (
		( oins_expected_prev[0] !== 1'bx ) && ( oins_prev[0] !== oins_expected_prev[0] )
		&& ((oins_expected_prev[0] !== last_oins_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[0] = oins_expected_prev[0];
	end
	if (
		( oins_expected_prev[1] !== 1'bx ) && ( oins_prev[1] !== oins_expected_prev[1] )
		&& ((oins_expected_prev[1] !== last_oins_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[1] = oins_expected_prev[1];
	end
	if (
		( oins_expected_prev[2] !== 1'bx ) && ( oins_prev[2] !== oins_expected_prev[2] )
		&& ((oins_expected_prev[2] !== last_oins_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[2] = oins_expected_prev[2];
	end
	if (
		( oins_expected_prev[3] !== 1'bx ) && ( oins_prev[3] !== oins_expected_prev[3] )
		&& ((oins_expected_prev[3] !== last_oins_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[3] = oins_expected_prev[3];
	end
	if (
		( oins_expected_prev[4] !== 1'bx ) && ( oins_prev[4] !== oins_expected_prev[4] )
		&& ((oins_expected_prev[4] !== last_oins_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[4] = oins_expected_prev[4];
	end
	if (
		( oins_expected_prev[5] !== 1'bx ) && ( oins_prev[5] !== oins_expected_prev[5] )
		&& ((oins_expected_prev[5] !== last_oins_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[5] = oins_expected_prev[5];
	end
	if (
		( oins_expected_prev[6] !== 1'bx ) && ( oins_prev[6] !== oins_expected_prev[6] )
		&& ((oins_expected_prev[6] !== last_oins_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[6] = oins_expected_prev[6];
	end
	if (
		( oins_expected_prev[7] !== 1'bx ) && ( oins_prev[7] !== oins_expected_prev[7] )
		&& ((oins_expected_prev[7] !== last_oins_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[7] = oins_expected_prev[7];
	end
	if (
		( oins_expected_prev[8] !== 1'bx ) && ( oins_prev[8] !== oins_expected_prev[8] )
		&& ((oins_expected_prev[8] !== last_oins_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[8] = oins_expected_prev[8];
	end
	if (
		( oins_expected_prev[9] !== 1'bx ) && ( oins_prev[9] !== oins_expected_prev[9] )
		&& ((oins_expected_prev[9] !== last_oins_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[9] = oins_expected_prev[9];
	end
	if (
		( oins_expected_prev[10] !== 1'bx ) && ( oins_prev[10] !== oins_expected_prev[10] )
		&& ((oins_expected_prev[10] !== last_oins_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[10] = oins_expected_prev[10];
	end
	if (
		( oins_expected_prev[11] !== 1'bx ) && ( oins_prev[11] !== oins_expected_prev[11] )
		&& ((oins_expected_prev[11] !== last_oins_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[11] = oins_expected_prev[11];
	end
	if (
		( oins_expected_prev[12] !== 1'bx ) && ( oins_prev[12] !== oins_expected_prev[12] )
		&& ((oins_expected_prev[12] !== last_oins_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[12] = oins_expected_prev[12];
	end
	if (
		( oins_expected_prev[13] !== 1'bx ) && ( oins_prev[13] !== oins_expected_prev[13] )
		&& ((oins_expected_prev[13] !== last_oins_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[13] = oins_expected_prev[13];
	end
	if (
		( oins_expected_prev[14] !== 1'bx ) && ( oins_prev[14] !== oins_expected_prev[14] )
		&& ((oins_expected_prev[14] !== last_oins_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[14] = oins_expected_prev[14];
	end
	if (
		( oins_expected_prev[15] !== 1'bx ) && ( oins_prev[15] !== oins_expected_prev[15] )
		&& ((oins_expected_prev[15] !== last_oins_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[15] = oins_expected_prev[15];
	end
	if (
		( oins_expected_prev[16] !== 1'bx ) && ( oins_prev[16] !== oins_expected_prev[16] )
		&& ((oins_expected_prev[16] !== last_oins_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[16] = oins_expected_prev[16];
	end
	if (
		( oins_expected_prev[17] !== 1'bx ) && ( oins_prev[17] !== oins_expected_prev[17] )
		&& ((oins_expected_prev[17] !== last_oins_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[17] = oins_expected_prev[17];
	end
	if (
		( oins_expected_prev[18] !== 1'bx ) && ( oins_prev[18] !== oins_expected_prev[18] )
		&& ((oins_expected_prev[18] !== last_oins_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[18] = oins_expected_prev[18];
	end
	if (
		( oins_expected_prev[19] !== 1'bx ) && ( oins_prev[19] !== oins_expected_prev[19] )
		&& ((oins_expected_prev[19] !== last_oins_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[19] = oins_expected_prev[19];
	end
	if (
		( oins_expected_prev[20] !== 1'bx ) && ( oins_prev[20] !== oins_expected_prev[20] )
		&& ((oins_expected_prev[20] !== last_oins_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[20] = oins_expected_prev[20];
	end
	if (
		( oins_expected_prev[21] !== 1'bx ) && ( oins_prev[21] !== oins_expected_prev[21] )
		&& ((oins_expected_prev[21] !== last_oins_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[21] = oins_expected_prev[21];
	end
	if (
		( oins_expected_prev[22] !== 1'bx ) && ( oins_prev[22] !== oins_expected_prev[22] )
		&& ((oins_expected_prev[22] !== last_oins_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[22] = oins_expected_prev[22];
	end
	if (
		( oins_expected_prev[23] !== 1'bx ) && ( oins_prev[23] !== oins_expected_prev[23] )
		&& ((oins_expected_prev[23] !== last_oins_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[23] = oins_expected_prev[23];
	end
	if (
		( oins_expected_prev[24] !== 1'bx ) && ( oins_prev[24] !== oins_expected_prev[24] )
		&& ((oins_expected_prev[24] !== last_oins_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[24] = oins_expected_prev[24];
	end
	if (
		( oins_expected_prev[25] !== 1'bx ) && ( oins_prev[25] !== oins_expected_prev[25] )
		&& ((oins_expected_prev[25] !== last_oins_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[25] = oins_expected_prev[25];
	end
	if (
		( oins_expected_prev[26] !== 1'bx ) && ( oins_prev[26] !== oins_expected_prev[26] )
		&& ((oins_expected_prev[26] !== last_oins_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[26] = oins_expected_prev[26];
	end
	if (
		( oins_expected_prev[27] !== 1'bx ) && ( oins_prev[27] !== oins_expected_prev[27] )
		&& ((oins_expected_prev[27] !== last_oins_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[27] = oins_expected_prev[27];
	end
	if (
		( oins_expected_prev[28] !== 1'bx ) && ( oins_prev[28] !== oins_expected_prev[28] )
		&& ((oins_expected_prev[28] !== last_oins_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[28] = oins_expected_prev[28];
	end
	if (
		( oins_expected_prev[29] !== 1'bx ) && ( oins_prev[29] !== oins_expected_prev[29] )
		&& ((oins_expected_prev[29] !== last_oins_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[29] = oins_expected_prev[29];
	end
	if (
		( oins_expected_prev[30] !== 1'bx ) && ( oins_prev[30] !== oins_expected_prev[30] )
		&& ((oins_expected_prev[30] !== last_oins_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[30] = oins_expected_prev[30];
	end
	if (
		( oins_expected_prev[31] !== 1'bx ) && ( oins_prev[31] !== oins_expected_prev[31] )
		&& ((oins_expected_prev[31] !== last_oins_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oins_exp[31] = oins_expected_prev[31];
	end
	if (
		( oinst_expected_prev[0] !== 1'bx ) && ( oinst_prev[0] !== oinst_expected_prev[0] )
		&& ((oinst_expected_prev[0] !== last_oinst_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[0] = oinst_expected_prev[0];
	end
	if (
		( oinst_expected_prev[1] !== 1'bx ) && ( oinst_prev[1] !== oinst_expected_prev[1] )
		&& ((oinst_expected_prev[1] !== last_oinst_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[1] = oinst_expected_prev[1];
	end
	if (
		( oinst_expected_prev[2] !== 1'bx ) && ( oinst_prev[2] !== oinst_expected_prev[2] )
		&& ((oinst_expected_prev[2] !== last_oinst_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[2] = oinst_expected_prev[2];
	end
	if (
		( oinst_expected_prev[3] !== 1'bx ) && ( oinst_prev[3] !== oinst_expected_prev[3] )
		&& ((oinst_expected_prev[3] !== last_oinst_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[3] = oinst_expected_prev[3];
	end
	if (
		( oinst_expected_prev[4] !== 1'bx ) && ( oinst_prev[4] !== oinst_expected_prev[4] )
		&& ((oinst_expected_prev[4] !== last_oinst_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[4] = oinst_expected_prev[4];
	end
	if (
		( oinst_expected_prev[5] !== 1'bx ) && ( oinst_prev[5] !== oinst_expected_prev[5] )
		&& ((oinst_expected_prev[5] !== last_oinst_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[5] = oinst_expected_prev[5];
	end
	if (
		( oinst_expected_prev[6] !== 1'bx ) && ( oinst_prev[6] !== oinst_expected_prev[6] )
		&& ((oinst_expected_prev[6] !== last_oinst_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[6] = oinst_expected_prev[6];
	end
	if (
		( oinst_expected_prev[7] !== 1'bx ) && ( oinst_prev[7] !== oinst_expected_prev[7] )
		&& ((oinst_expected_prev[7] !== last_oinst_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[7] = oinst_expected_prev[7];
	end
	if (
		( oinst_expected_prev[8] !== 1'bx ) && ( oinst_prev[8] !== oinst_expected_prev[8] )
		&& ((oinst_expected_prev[8] !== last_oinst_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[8] = oinst_expected_prev[8];
	end
	if (
		( oinst_expected_prev[9] !== 1'bx ) && ( oinst_prev[9] !== oinst_expected_prev[9] )
		&& ((oinst_expected_prev[9] !== last_oinst_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[9] = oinst_expected_prev[9];
	end
	if (
		( oinst_expected_prev[10] !== 1'bx ) && ( oinst_prev[10] !== oinst_expected_prev[10] )
		&& ((oinst_expected_prev[10] !== last_oinst_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[10] = oinst_expected_prev[10];
	end
	if (
		( oinst_expected_prev[11] !== 1'bx ) && ( oinst_prev[11] !== oinst_expected_prev[11] )
		&& ((oinst_expected_prev[11] !== last_oinst_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[11] = oinst_expected_prev[11];
	end
	if (
		( oinst_expected_prev[12] !== 1'bx ) && ( oinst_prev[12] !== oinst_expected_prev[12] )
		&& ((oinst_expected_prev[12] !== last_oinst_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[12] = oinst_expected_prev[12];
	end
	if (
		( oinst_expected_prev[13] !== 1'bx ) && ( oinst_prev[13] !== oinst_expected_prev[13] )
		&& ((oinst_expected_prev[13] !== last_oinst_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[13] = oinst_expected_prev[13];
	end
	if (
		( oinst_expected_prev[14] !== 1'bx ) && ( oinst_prev[14] !== oinst_expected_prev[14] )
		&& ((oinst_expected_prev[14] !== last_oinst_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[14] = oinst_expected_prev[14];
	end
	if (
		( oinst_expected_prev[15] !== 1'bx ) && ( oinst_prev[15] !== oinst_expected_prev[15] )
		&& ((oinst_expected_prev[15] !== last_oinst_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[15] = oinst_expected_prev[15];
	end
	if (
		( oinst_expected_prev[16] !== 1'bx ) && ( oinst_prev[16] !== oinst_expected_prev[16] )
		&& ((oinst_expected_prev[16] !== last_oinst_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[16] = oinst_expected_prev[16];
	end
	if (
		( oinst_expected_prev[17] !== 1'bx ) && ( oinst_prev[17] !== oinst_expected_prev[17] )
		&& ((oinst_expected_prev[17] !== last_oinst_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[17] = oinst_expected_prev[17];
	end
	if (
		( oinst_expected_prev[18] !== 1'bx ) && ( oinst_prev[18] !== oinst_expected_prev[18] )
		&& ((oinst_expected_prev[18] !== last_oinst_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[18] = oinst_expected_prev[18];
	end
	if (
		( oinst_expected_prev[19] !== 1'bx ) && ( oinst_prev[19] !== oinst_expected_prev[19] )
		&& ((oinst_expected_prev[19] !== last_oinst_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[19] = oinst_expected_prev[19];
	end
	if (
		( oinst_expected_prev[20] !== 1'bx ) && ( oinst_prev[20] !== oinst_expected_prev[20] )
		&& ((oinst_expected_prev[20] !== last_oinst_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[20] = oinst_expected_prev[20];
	end
	if (
		( oinst_expected_prev[21] !== 1'bx ) && ( oinst_prev[21] !== oinst_expected_prev[21] )
		&& ((oinst_expected_prev[21] !== last_oinst_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[21] = oinst_expected_prev[21];
	end
	if (
		( oinst_expected_prev[22] !== 1'bx ) && ( oinst_prev[22] !== oinst_expected_prev[22] )
		&& ((oinst_expected_prev[22] !== last_oinst_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[22] = oinst_expected_prev[22];
	end
	if (
		( oinst_expected_prev[23] !== 1'bx ) && ( oinst_prev[23] !== oinst_expected_prev[23] )
		&& ((oinst_expected_prev[23] !== last_oinst_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[23] = oinst_expected_prev[23];
	end
	if (
		( oinst_expected_prev[24] !== 1'bx ) && ( oinst_prev[24] !== oinst_expected_prev[24] )
		&& ((oinst_expected_prev[24] !== last_oinst_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[24] = oinst_expected_prev[24];
	end
	if (
		( oinst_expected_prev[25] !== 1'bx ) && ( oinst_prev[25] !== oinst_expected_prev[25] )
		&& ((oinst_expected_prev[25] !== last_oinst_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[25] = oinst_expected_prev[25];
	end
	if (
		( oinst_expected_prev[26] !== 1'bx ) && ( oinst_prev[26] !== oinst_expected_prev[26] )
		&& ((oinst_expected_prev[26] !== last_oinst_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[26] = oinst_expected_prev[26];
	end
	if (
		( oinst_expected_prev[27] !== 1'bx ) && ( oinst_prev[27] !== oinst_expected_prev[27] )
		&& ((oinst_expected_prev[27] !== last_oinst_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[27] = oinst_expected_prev[27];
	end
	if (
		( oinst_expected_prev[28] !== 1'bx ) && ( oinst_prev[28] !== oinst_expected_prev[28] )
		&& ((oinst_expected_prev[28] !== last_oinst_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[28] = oinst_expected_prev[28];
	end
	if (
		( oinst_expected_prev[29] !== 1'bx ) && ( oinst_prev[29] !== oinst_expected_prev[29] )
		&& ((oinst_expected_prev[29] !== last_oinst_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[29] = oinst_expected_prev[29];
	end
	if (
		( oinst_expected_prev[30] !== 1'bx ) && ( oinst_prev[30] !== oinst_expected_prev[30] )
		&& ((oinst_expected_prev[30] !== last_oinst_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[30] = oinst_expected_prev[30];
	end
	if (
		( oinst_expected_prev[31] !== 1'bx ) && ( oinst_prev[31] !== oinst_expected_prev[31] )
		&& ((oinst_expected_prev[31] !== last_oinst_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oinst_exp[31] = oinst_expected_prev[31];
	end
	if (
		( opc_expected_prev[0] !== 1'bx ) && ( opc_prev[0] !== opc_expected_prev[0] )
		&& ((opc_expected_prev[0] !== last_opc_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[0] = opc_expected_prev[0];
	end
	if (
		( opc_expected_prev[1] !== 1'bx ) && ( opc_prev[1] !== opc_expected_prev[1] )
		&& ((opc_expected_prev[1] !== last_opc_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[1] = opc_expected_prev[1];
	end
	if (
		( opc_expected_prev[2] !== 1'bx ) && ( opc_prev[2] !== opc_expected_prev[2] )
		&& ((opc_expected_prev[2] !== last_opc_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[2] = opc_expected_prev[2];
	end
	if (
		( opc_expected_prev[3] !== 1'bx ) && ( opc_prev[3] !== opc_expected_prev[3] )
		&& ((opc_expected_prev[3] !== last_opc_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[3] = opc_expected_prev[3];
	end
	if (
		( opc_expected_prev[4] !== 1'bx ) && ( opc_prev[4] !== opc_expected_prev[4] )
		&& ((opc_expected_prev[4] !== last_opc_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[4] = opc_expected_prev[4];
	end
	if (
		( opc_expected_prev[5] !== 1'bx ) && ( opc_prev[5] !== opc_expected_prev[5] )
		&& ((opc_expected_prev[5] !== last_opc_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[5] = opc_expected_prev[5];
	end
	if (
		( opc_expected_prev[6] !== 1'bx ) && ( opc_prev[6] !== opc_expected_prev[6] )
		&& ((opc_expected_prev[6] !== last_opc_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[6] = opc_expected_prev[6];
	end
	if (
		( opc_expected_prev[7] !== 1'bx ) && ( opc_prev[7] !== opc_expected_prev[7] )
		&& ((opc_expected_prev[7] !== last_opc_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[7] = opc_expected_prev[7];
	end
	if (
		( opc_expected_prev[8] !== 1'bx ) && ( opc_prev[8] !== opc_expected_prev[8] )
		&& ((opc_expected_prev[8] !== last_opc_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[8] = opc_expected_prev[8];
	end
	if (
		( opc_expected_prev[9] !== 1'bx ) && ( opc_prev[9] !== opc_expected_prev[9] )
		&& ((opc_expected_prev[9] !== last_opc_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[9] = opc_expected_prev[9];
	end
	if (
		( opc_expected_prev[10] !== 1'bx ) && ( opc_prev[10] !== opc_expected_prev[10] )
		&& ((opc_expected_prev[10] !== last_opc_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[10] = opc_expected_prev[10];
	end
	if (
		( opc_expected_prev[11] !== 1'bx ) && ( opc_prev[11] !== opc_expected_prev[11] )
		&& ((opc_expected_prev[11] !== last_opc_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[11] = opc_expected_prev[11];
	end
	if (
		( opc_expected_prev[12] !== 1'bx ) && ( opc_prev[12] !== opc_expected_prev[12] )
		&& ((opc_expected_prev[12] !== last_opc_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[12] = opc_expected_prev[12];
	end
	if (
		( opc_expected_prev[13] !== 1'bx ) && ( opc_prev[13] !== opc_expected_prev[13] )
		&& ((opc_expected_prev[13] !== last_opc_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[13] = opc_expected_prev[13];
	end
	if (
		( opc_expected_prev[14] !== 1'bx ) && ( opc_prev[14] !== opc_expected_prev[14] )
		&& ((opc_expected_prev[14] !== last_opc_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[14] = opc_expected_prev[14];
	end
	if (
		( opc_expected_prev[15] !== 1'bx ) && ( opc_prev[15] !== opc_expected_prev[15] )
		&& ((opc_expected_prev[15] !== last_opc_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[15] = opc_expected_prev[15];
	end
	if (
		( opc_expected_prev[16] !== 1'bx ) && ( opc_prev[16] !== opc_expected_prev[16] )
		&& ((opc_expected_prev[16] !== last_opc_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[16] = opc_expected_prev[16];
	end
	if (
		( opc_expected_prev[17] !== 1'bx ) && ( opc_prev[17] !== opc_expected_prev[17] )
		&& ((opc_expected_prev[17] !== last_opc_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[17] = opc_expected_prev[17];
	end
	if (
		( opc_expected_prev[18] !== 1'bx ) && ( opc_prev[18] !== opc_expected_prev[18] )
		&& ((opc_expected_prev[18] !== last_opc_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[18] = opc_expected_prev[18];
	end
	if (
		( opc_expected_prev[19] !== 1'bx ) && ( opc_prev[19] !== opc_expected_prev[19] )
		&& ((opc_expected_prev[19] !== last_opc_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[19] = opc_expected_prev[19];
	end
	if (
		( opc_expected_prev[20] !== 1'bx ) && ( opc_prev[20] !== opc_expected_prev[20] )
		&& ((opc_expected_prev[20] !== last_opc_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[20] = opc_expected_prev[20];
	end
	if (
		( opc_expected_prev[21] !== 1'bx ) && ( opc_prev[21] !== opc_expected_prev[21] )
		&& ((opc_expected_prev[21] !== last_opc_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[21] = opc_expected_prev[21];
	end
	if (
		( opc_expected_prev[22] !== 1'bx ) && ( opc_prev[22] !== opc_expected_prev[22] )
		&& ((opc_expected_prev[22] !== last_opc_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[22] = opc_expected_prev[22];
	end
	if (
		( opc_expected_prev[23] !== 1'bx ) && ( opc_prev[23] !== opc_expected_prev[23] )
		&& ((opc_expected_prev[23] !== last_opc_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[23] = opc_expected_prev[23];
	end
	if (
		( opc_expected_prev[24] !== 1'bx ) && ( opc_prev[24] !== opc_expected_prev[24] )
		&& ((opc_expected_prev[24] !== last_opc_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[24] = opc_expected_prev[24];
	end
	if (
		( opc_expected_prev[25] !== 1'bx ) && ( opc_prev[25] !== opc_expected_prev[25] )
		&& ((opc_expected_prev[25] !== last_opc_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[25] = opc_expected_prev[25];
	end
	if (
		( opc_expected_prev[26] !== 1'bx ) && ( opc_prev[26] !== opc_expected_prev[26] )
		&& ((opc_expected_prev[26] !== last_opc_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[26] = opc_expected_prev[26];
	end
	if (
		( opc_expected_prev[27] !== 1'bx ) && ( opc_prev[27] !== opc_expected_prev[27] )
		&& ((opc_expected_prev[27] !== last_opc_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[27] = opc_expected_prev[27];
	end
	if (
		( opc_expected_prev[28] !== 1'bx ) && ( opc_prev[28] !== opc_expected_prev[28] )
		&& ((opc_expected_prev[28] !== last_opc_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[28] = opc_expected_prev[28];
	end
	if (
		( opc_expected_prev[29] !== 1'bx ) && ( opc_prev[29] !== opc_expected_prev[29] )
		&& ((opc_expected_prev[29] !== last_opc_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[29] = opc_expected_prev[29];
	end
	if (
		( opc_expected_prev[30] !== 1'bx ) && ( opc_prev[30] !== opc_expected_prev[30] )
		&& ((opc_expected_prev[30] !== last_opc_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[30] = opc_expected_prev[30];
	end
	if (
		( opc_expected_prev[31] !== 1'bx ) && ( opc_prev[31] !== opc_expected_prev[31] )
		&& ((opc_expected_prev[31] !== last_opc_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opc_exp[31] = opc_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pipelined_computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [5:0] in_port0;
reg [5:0] in_port1;
reg resetn;
// wires                                               
wire [31:0] WangHangyu;
wire mem_clock;
wire [31:0] oealu;
wire [31:0] oins;
wire [31:0] oinst;
wire [31:0] omalu;
wire [31:0] onpc;
wire [31:0] opc;
wire [31:0] out_port0;
wire [31:0] out_port1;
wire [31:0] out_port2;
wire [31:0] out_port3;
wire [31:0] owalu;

wire sampler;                             

// assign statements (if any)                          
pipelined_computer i1 (
// port map - connection between master ports and signals/registers   
	.WangHangyu(WangHangyu),
	.clock(clock),
	.in_port0(in_port0),
	.in_port1(in_port1),
	.mem_clock(mem_clock),
	.oealu(oealu),
	.oins(oins),
	.oinst(oinst),
	.omalu(omalu),
	.onpc(onpc),
	.opc(opc),
	.out_port0(out_port0),
	.out_port1(out_port1),
	.out_port2(out_port2),
	.out_port3(out_port3),
	.owalu(owalu),
	.resetn(resetn)
);

// resetn
initial
begin
	resetn = 1'b0;
	resetn = #30000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

pipelined_computer_vlg_sample_tst tb_sample (
	.clock(clock),
	.in_port0(in_port0),
	.in_port1(in_port1),
	.resetn(resetn),
	.sampler_tx(sampler)
);

pipelined_computer_vlg_check_tst tb_out(
	.WangHangyu(WangHangyu),
	.mem_clock(mem_clock),
	.oealu(oealu),
	.oins(oins),
	.oinst(oinst),
	.omalu(omalu),
	.onpc(onpc),
	.opc(opc),
	.out_port0(out_port0),
	.out_port1(out_port1),
	.out_port2(out_port2),
	.out_port3(out_port3),
	.owalu(owalu),
	.sampler_rx(sampler)
);
endmodule

